Many different relationships are easily conceptualized as a graph or network, where a graph is defined as a collection of nodes (entities) and edges (relationships) \cite{newman2003structure}. The field of graph theory, originally dating back to Euler in the 1700s, can be leveraged to better understand the underlying structure of these relationships. Examples of relationships include social networks (sociology), the world wide web (computer science), and protein networks (biology). 
Community detection in particular is one useful aspect of graph theory employed in analysis of each of these real-world applications to identify entities sharing a similar characteristic. Communities, also known as clusters or modules, are roughly defined as a group of nodes in a graph that share common properties \cite{fortunato2010community}. Typically the way a community shows up in a graph is a collection of nodes that has many edges connecting nodes within but not many edges to nodes outside the collection. 

Current methodology for community detection often involves an algorithmic approach, and commonly partitions a graph into node clusters in an iterative manner before some stopping criterion. Tools such as igraph \cite{gc-igraph} and Gephi \cite{ICWSM09154} provide users with algorithmic community detection, and NodeXL \cite{hansen2010analyzing} provides detection algorithms for a similar concept called cliques. Algorithmic clustering is useful because it is an automated way to do community detection. However, determining the best algorithm is problematic because, as noted by Fortunato \cite{fortunato2010community}, ``The main elements of the problem [graph clustering] themselves, i.e. the concepts of community and partition, are not rigorously defined, and require some degree of arbitrariness and/or common sense". Since communities are often fuzzily-defined human concepts, an alternative approach is to leverage the human visual system, which is capable of incorporating nuance, to identify communities. The above tools do allow graph visualization, however they do not use humans as the vehicle for community detection.

To visualize a graph, a node-link diagram is used in which nodes are represented as a single point and a connecting edge is represented as a line connecting two points. The creation of this diagram involves assigning each node a cartesian coordinate, which is not an inherent property of a graph. This assigment is called a graph layout. McGrath, Blythe, and Krackhardt \cite{mcgrath1996seeing} found that the layout of a graph significantly affected the number of communities that users detected within a graph. Thus, when humans act as the mechanism used to detect communities, special attention needs to be paid to the layout being used. The same study also found that location of a node spatially relative to other nodes in a cluster has a significant effect on user ability to detect the community. The authors suggest a simple principle that will lead to clear depiction of a network: ``adjacent nodes must be placed near to each other if possible" \cite{mcgrath1996seeing}. One layout that adheres to this principle is a force-directed layout. This layout algorithm implements edges as fixed-distance geometric constraints, meaning that groups of nodes sharing multiple edges will be pulled in closer proximity. Dwyer, et. al. \cite{dwyer2009comparison} found the force-directed layout to be the best algorithmic layout as a platform to detect cliques, which are one type of community. Further, they concluded that user-generated layouts similar to a force-based layout, but with symmetric layout within the cliques, allowed an even more accurate cluster recognition by users. Adaptation of the force-directed layout to incorporate a symmetric within cluster layout ``may be a difficult task for automatic algorithms, since maximal clique detection is NP-hard" \cite{dwyer2009comparison}. As cliques are similar to communities, in fact a clique is a community with perfect membership, we infer that adaptation of the force-directed layout to have symmetry within a community would be equivalently difficult. Thus, a force-directed layout is a starting point for the user to be able to ``tweak" a layout into a more easily interpretable structure.

In complex or large graphs it can be difficult to glean meaning from a graphical representation, even while using a force-directed layout. Dunne and Schneiderman \cite{dunne2013motif} introduce the idea of motifs, or repeated patterns in a graph, to simplify a network. One type of motif is a clique. By replacing the cliques with representations, like a large circle, and removing the correspding extra nodes and edges, the visualization will be more effective at revealing relationships. With fewer nodes and edges to display, visual complexity of the graph visualization is greatly reduced, allowing the user to analyze the network structure more accurately.

We used these findings to construct a community detection visualization tool, gravicom (available at \url{http://glimmer.rstudio.com/andeek/NetworkGraph/}). In this paper we first give describe the user interface and functionality provided in gravicom. We then illustrate its use with two data sets, one, a well known data set of college football and the other, a network of political book co-purchasing. The third section of the paper details three important pieces of technology used to create gravicom. We finish the paper with a look forward at some further work that can be incorporated into the tool.


