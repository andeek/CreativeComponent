Many different relationships are often easily conceptualized as a graph or network, where a graph is defined as a collection of nodes (entities) and edges (relationships) \cite{newman2003structure}. Examples of such relationships include social networks (sociology), the world wide web (computer science), and protein networks (biology). Community detection in particular is often one important goal in the analysis of real world networks, with the aim of identifying members or entities in the network that share a similar characteristic of interest. Communities, also known as clusters or modules, are roughly defined as a group of nodes in a graph that share common
\cc{delete: common}
properties \cite{fortunato2010community}. Commonly, a community structure can be characterized in a graph as a collection of nodes which share many edges internally, but exhibit relatively fewer edges to other nodes outside the collection. 

Current methodology for community detection often involves an algorithmic approach for node clustering and commonly partitions a graph into node clusters in an iterative manner before some stopping criterion. In the mathematical mechanics of such algorithms, there is nothing inherently guided based on visual inspection by a user, in how community structures are obtained.
\cc{suggested reword: user visual inspection does not inherently guide how community structures are obtained.} 
Tools do 
\cc{delete: do}
exist for displaying or visualizing graph data but there is again somewhat of 
\cc{comment: "somewhat of a" is an imprecise phrase; consider deleting or changing to something more precise such as minor or significant, depending on your meaning}
a disconnect between the capability to display such data and the ability of a user to visually guide steps of community detection. For example, tools such as igraph \cite{gc-igraph} and Gephi \cite{ICWSM09154} for graph visualization offer only algorithmic approaches for community detection, separate from any input or interface on the part of a user
\cc{delete: any input or interface on the part of a usery; insert: user input or interface}
, and NodeXL \cite{hansen2010analyzing} similarly 
\cc{potential reword: correspondingly, or see other comment}provides detection algorithms for a similar
\cc{potential reword: related}
concept called cliques. Algorithmic clustering is indeed useful because this offers an automated way to perform community detection. However, determining the best algorithm for community detection is problematic because, as noted by Fortunato \cite{fortunato2010community}, ``The main elements of the problem themselves [graph clustering], i.e. the concepts of community and partition, are not rigorously defined, and require some degree of arbitrariness and/or common sense". 

Since communities are often fuzzily-defined human concepts, an alternative approach is to leverage the human visual system, which is capable of incorporating nuance, to identify communities. To facilitate this process, our goal here is to introduce a novel visualization-based community detection tool, called gravicom, that
\cc{replace: which} 
allows users to visually direct and interact with the steps of community detection. Additionally, as described in the following, gravicom is equipped 
\cc{delete: gravicom is equipped; insert: We equipped gravicom} 
with several functionalities which 
\cc{replace: that}
permit users to visually cluster nodes and assess the resulting clusters through visual features and quantitative summaries in the process of finding community structures. Unlike the tools mentioned above for graph visualization, gravicom allows human interaction as the vehicle for community detection.

To visualize a graph, a node-link diagram is used 
\cc{suggested replace: Users visualize a graph as a node-link diagram,}
in which nodes are
\cc{replace: a node is}
represented as a single point and a connecting edge is represented as a line connecting two points. The
\cc{delete: The}
creation of this diagram involves assigning each node a Cartesian coordinate, which is not an inherent property of a graph. This assignment is called a graph layout. McGrath, Blythe, and Krackhardt \cite{mcgrath1996seeing} found that the layout of a graph significantly affected the number of communities that users detected within a graph. Thus, when humans are the mechanism used to detect communities, special attention needs to be paid to the layout being used. The same study also found that location of a node spatially relative to other nodes in a cluster has a significant effect on user ability to detect the community. The authors suggest a simple principle that will lead to clear depiction of a network: ``adjacent nodes must be placed near to each other if possible" \cite{mcgrath1996seeing}. One layout that adheres to this principle is a force-directed layout. This layout algorithm implements edges as fixed-distance geometric constraints, meaning that groups of nodes sharing multiple edges will be 
\cc{delete: will be; insert: are}
pulled in closer proximity. Dwyer, et. al. \cite{dwyer2009comparison} found the force-directed layout to be the best algorithmic layout as a platform to detect cliques, which are one type of community. Further, they concluded that user-generated layouts similar to a force-based layout, but with symmetric layout within the cliques, allowed an even more accurate cluster recognition by users. Adaptation of the force-directed layout to incorporate a symmetric within cluster 
\cc{comment: I think this should be within-cluster, because it is an adjective modifying layout, though I am not certain}
layout ``may be a difficult task for automatic algorithms, since maximal clique detection is NP-hard" \cite{dwyer2009comparison}. As cliques are similar to communities, in fact a clique is a community with perfect membership, we infer that adaptation of the force-directed layout to have symmetry within a community would be equivalently difficult. Thus, a force-directed layout is a starting point for the user to be able to ``tweak" a layout into a more easily interpretable structure. This aspect is crucially incorporated into the mechanics of gravicom.
\cc{Replace: We incorporated this crucial aspect into the mechanics of gravicom.}

In complex or large graphs it can be difficult to glean meaning from a graphical representation, even while using a force-directed layout. Dunne and Schneiderman \cite{dunne2013motif} introduce the idea of motifs, or repeated patterns in a graph, to simplify a network. One type of motif is a clique. By replacing the cliques with representations, like a large circle, and removing the corresponding extra nodes and edges, the visualization will be more effective at revealing relationships. With fewer nodes and edges to display, visual complexity of the graph visualization is greatly reduced, allowing the user to analyze the network structure more accurately.

We used these findings to construct a
\cc{delete: a; insert: the gravicom}
community detection visualization tool. In this paper we first describe the user interface and functionality provided in gravicom. In Section 3, we then illustrate the use of gravicom for community detection with two network data sets, one, a well known data set of college football and the other, a network of political book co-purchasing. Section 4 details three important pieces of technology 
\cc{insert: that we}
used to create gravicom and describes the technical aspects of how these components are implemented together. Section 5 then provides some 
\cc{delete: some}
concluding remarks as well as a look forward at some 
\cc{delete: some}further network inference problems that can be addressed with extensions and modifications of gravicom. gravicom is available at \url{http://glimmer.rstudio.com/andeek/NetworkGraph/}.


