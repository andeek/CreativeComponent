{
    "contents" : ".libPaths(\"/home/andeek/R/library\")\naddResourcePath('images', '~/ShinyApps/DevNetworkGraph/images')\naddResourcePath('scripts', '~/ShinyApps/DevNetworkGraph/scripts')\n#addResourcePath('data', '~/ShinyApps/DevNetworkGraph/data')\n#addResourcePath('images', '/var/shiny-server/www/D3/Network\\ Graph/images') \n#addResourcePath('images', 'U:/Documents/Projects/Community-Detection/Prototype\\ D3-Shiny/Network\\ Graph/images')\n#addResourcePath('images', '~/Documents/Projects/Community-Detection/Prototype\\ D3-Shiny/Network\\ Graph/images')\n\nlibrary(plyr)\n\n#data_sets <- c(\"data/football.gml\", \"data/karate.gml\")\n#layouts <- c(\"force\")\ndata_sets <- paste(\"data/\", list.files(\"data/\", pattern=\"*.gml\"), sep=\"\")\n\ngetXMLfromFile <- function(file) {\n  require(igraph)\n  graph<-read.graph(file, format=\"gml\")\n  layout <- layout.auto(graph)\n  V(graph)$x <- layout[,1]\n  V(graph)$y <- layout[,2]\n  write.graph(graph, paste(strsplit(file, \"\\\\.\")[[1]][1], \".xml\", sep=\"\"), format=\"graphml\")\n  return(paste(strsplit(file, \"\\\\.\")[[1]][1], \".xml\", sep=\"\"))\n}\n\nshinyServer(function(input, output) {\n  source(\"code/GraphMLtoJSON.R\")\n  # Drop-down selection box for which data set\n  output$choose_dataset <- reactiveUI(function() {\n    selectInput(\"dataset\", \"Data set\", as.list(data_sets))\n  })\n  \n  # Layouts\n  #output$choose_layout <- reactiveUI(function() {\n    # If missing input, return to avoid error later in function\n  #  if(is.null(input$dataset)) return()\n  #  selectInput(\"layout\", \"Graph Layout\", as.list(layouts))\n  #})\n  \n  data <- reactive({\n    #if(is.null(input$dataset) | is.null(input$layout))\n    if(is.null(input$dataset))\n      return()\n    \n    supported_formats<-c(\"gml\")\n    if(tolower(strsplit(input$dataset, \"\\\\.\")[[1]][2]) %in% supported_formats) {\n      #return(list(data_json=GraphMLtoJSON(getXMLfromFile(input$dataset)), layout=input$layout))\n      return(list(data_json=GraphMLtoJSON(getXMLfromFile(input$dataset)), index = 0))\n    } else {\n      return()  \n    }\n  })\n  output$d3io <- reactive({ data() })\n  \n  datasetInput <- reactive({\n    empty<-data.frame(Within=0, Outside=0, row.names=\"Connections\")\n    \n    if(exists(\"input\") && length(names(input)) > 0){\n      if(names(input)[1] == \"d3io\") {\n        nodes<-ldply(input[[names(input)[names(input) == \"d3io\"]]][\"nodes\"][[1]], function(x) data.frame(x[c(\"_count\",\"group\",\"id\",\"index\",\"selected\",\"weight\")]))\n  \n        if(\"selected\" %in% names(nodes)) { \n          nodes_selected<-as.character(subset(nodes, selected == 1)$id)\n          edges<-ldply(input[[names(input)[names(input) == \"d3io\"]]][\"links\"][[1]], function(x) data.frame(c(x[[\"source\"]][c(\"id\", \"selected\")], x[[\"target\"]][c(\"id\", \"selected\")])))\n          names(edges) <- c(\"source.id\", \"source.selected\", \"target.id\", \"target.selected\")\n          if(nrow(edges) > 0) {\n            edges_selected<-subset(edges, source.selected == 1 | target.selected == 1)\n            within_selected<-subset(edges_selected, as.character(source.id) %in% nodes_selected & as.character(target.id) %in% nodes_selected)\n            n_total_selected<-nrow(edges_selected)\n            n_within_selected<-nrow(within_selected)\n          } else {\n            n_total_selected<-0\n            n_within_selected<-0\n          }        \n          empty<-data.frame(Within=n_within_selected, Outside=n_total_selected - n_within_selected, row.names=\"Connections\")\n        }\n      }\n    }\n    \n    return(empty)\n  })\n  \n  output$d3summary <- renderTable({dataset <- datasetInput()\n                                   print(dataset)}, digits=0)\n  \n  output$groupTable <- renderText({\n    html<-\"<div id='accordion'>\"\n    \n    empty<-data.frame(Node=character(), Group=character())\n    \n    if(names(input)[1] == \"d3io\") {\n      nodes<-input[[names(input)[names(input) == \"d3io\"]]][\"nodes\"][[1]]\n      \n      for(i in 1:length(nodes)) {\n        if(nodes[[i]]['_count'] > 1) {\n          for(j in 1:length(nodes[[i]][['rollednodes_label']])) {\n            empty<-rbind(empty, cbind(Node=as.character(nodes[[i]][['rollednodes_label']][[j]]), Group=as.character(nodes[[i]]['group'])))\n            names(empty)<-c(\"Node\",\"Group\")\n          }\n        }\n      }\n      \n      empty<-empty[with(empty, order(as.numeric(as.character(Group)), as.character(Node))), ]\n    }\n    \n    for(g in as.character(unique(empty$Group))) {\n      html<-paste(html,\"<h3>Group \", g, \" (\", nrow(subset(empty, as.character(Group) == g)), \")\", \"</h3><div><ul>\", sep=\"\")\n      for(n in as.character(subset(empty, as.character(Group) == g)$Node)) {\n        html<-paste(html,\"<li>\", n, \"</li>\", sep=\"\")\n      }\n      html<-paste(html,\"</ul></div>\", sep=\"\")\n    }\n    html<-paste(html,\"</div>\", sep=\"\")\n    html<-paste(html, \"<script> $( '#accordion' ).accordion({active: false, collapsible: true});</script>\", sep=\"\")\n    return(html)\n  })\n\n  \n})\n",
    "created" : 1376955703169.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1928793708",
    "id" : "A0DB254D",
    "lastKnownWriteTime" : 1376353060,
    "path" : "~/Documents/Projects/Community-Detection/Prototype D3-Shiny/Network Graph/server.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}